@{
    
}

@{

    string[] ops = @"Assignment operators
Comparison operators
Arithmetic operators
Bitwise operators
Logical operators
BigInt operators
String operators
Conditional (ternary) operator
Comma operator
Unary operators
Relational operators
Basic expressions".Split("\n");
}


@* @foreach (string op in ops)
    {
    Console.WriteLine(@$"<h2>{op}</h2> <div class='container'><div class='container'>
    <p>

    </p></div></div>");
    } *@

@* = += -= /= %= **= <<= >>= >>>= &= ^= |= &&= ||= ??= *@



<h2>Assignment operators</h2>
        <p>
        <table>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Syntax
                </th>
                <th>
                    Explanation
                </th>
            </tr>

            <tr>
                <td> Assignment </td>
                <td><code> x = 1 </code></td>
                <td><code> x = 1 </code></td>
            </tr>

            <tr>
                <td> Addition assignment </td>
                <td><code> x += 1 </code></td>
                <td><code> x = x + 1 </code></td>
            </tr>

            <tr>
                <td> Subtraction assignment </td>
                <td><code> x -= 1 </code></td>
                <td><code> x = x - 1 </code></td>
            </tr>

            <tr>
                <td> Multiplication assignment </td>
                <td><code> x *= 1 </code></td>
                <td><code> x = x * 1 </code></td>
            </tr>

            <tr>
                <td> Division assignment </td>
                <td><code> x /= 1 </code></td>
                <td><code> x = x / 1 </code></td>
            </tr>

            <tr>
                <td> Remainder assignment </td>
                <td><code> x %= 1 </code></td>
                <td><code> x = x % 1 </code></td>
            </tr>

            <tr>
                <td> Exponentiation assignment </td>
                <td><code> x **= 1 </code></td>
                <td><code> x = x ** 1 </code></td>
            </tr>

            <tr>
                <td> Left shift assignment </td>
                <td><code> x <<= 1 </code></td>
                <td><code> x = x << 1 </code></td>
            </tr>

            <tr>
                <td> Right shift assignment </td>
                <td><code> x >>= 1 </code></td>
                <td><code> x = x >> 1 </code></td>
            </tr>

            <tr>
                <td> Unsigned right shift assignment </td>
                <td><code> x >>>= 1 </code></td>
                <td><code> x = x >>> 1 </code></td>
            </tr>

            <tr>
                <td> Bitwise AND assignment </td>
                <td><code> x &= 1 </code></td>
                <td><code> x = x & 1 </code></td>
            </tr>

            <tr>
                <td> Bitwise XOR assignment </td>
                <td><code> x ^= 1 </code></td>
                <td><code> x = x ^ 1 </code></td>
            </tr>

            <tr>
                <td> Bitwise OR assignment </td>
                <td><code> x |= 1 </code></td>
                <td><code> x = x | 1 </code></td>
            </tr>

            <tr>
                <td> Logical AND assignment </td>
                <td><code> x &&= 1 </code></td>
                <td><code> x && (x = 1) </code></td>
            </tr>

            <tr>
                <td> Logical OR assignment </td>
                <td><code> x ||= 1 </code></td>
                <td><code> x || (x = 1) </code></td>
            </tr>

            <tr>
                <td> Logical nullish assignment </td>
                <td><code> x ??= 1 </code></td>
                <td><code> x ?? (x = 1) </code></td>
            </tr>

        </table>

        </p>

<h2>Comparison operators</h2>
        <p>
            <table>
                <tr>
                    <th>Operator</th>
                    <th>Description</th>
                    <th>Examples that return true</th>
                </tr>
                <tr>
                    <td>
                        <code> == </code>
                    </td>
                    <td>
                        Return true if operands are the same
                        | No type checking 
                    </td>
                    <td>
                        <code>0 == "0"</code>
                        <code>20 == "20"</code>
                        <code>"a" == "a"</code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code> != </code>
                    </td>
                    <td>
                        Returns true if operands are
                        NOT the same | No type checking
                    </td>
                    <td>
                        <code> 2 != "3" </code> 
                        <code> 5 != 7 </code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>===</code>
                    </td>
                    <td>
                        Check if operands are equal and 
                        check if types are equal
                    </td>
                    <td>
                        <code>2 === 2</code>
                        <code>3 === 3</code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>!==</code>
                    </td>
                    <td>
                        Returns true if two operands 
                        are not equal and it checks for type
                    </td>
                    
                    <td>
                        <code>2 !== "2"</code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code> > </code>
                    </td>
                    <td>
                        Return true if operand 1 is greater than operand 2
                    </td>
                    <td>
                        <code>2 > 1</code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code> >= </code>
                    </td>
                    <td>
                        Return true if operand 1 is greater than or equal to operand 2.
                    </td>
                    <td>
                        <code>3 >= 3</code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code> < </code>
                    </td>
                    <td>
                        Operand 1 is less than operand 2.
                    </td>
                    <td>
                        <code>1 < 2</code>
                    </td>
                </tr>
                <tr>
                    <td>
                        <code> <= </code>
                    </td>
                    <td>
                        Operand 1 is less or equal to operand 2.
                    </td>
                    <td>
                        <code>1 <= 2</code>
                    </td>
                </tr>
            </table>
        </p>
<h2>Arithmetic operators</h2>
        <p>
            <table>
                <tr>
                    <th>Operator</th>
                    <th>Description</th>
                    <th>Examples</th>
                </tr>
                <tr>
                    <td>
                        <code>%</code>
                    </td>
                    <td>
                        Returns remainder of operand1 divided by operand 2
                    </td>
                    <td>
                        <code>20 % 9 = 2</code>
                    </td>
                </tr>
                <tr>
                    <td><code>++</code></td>
                    <td>Increment by 1</td>
                    <td> <code>x++ (x = x+1)</code></td>
                </tr>
                <tr>
                    <td><code>--</code></td>
                    <td>Decrement by 1</td>
                    <td> <code>x-- (x = x-1)</code></td>
                </tr>
                <tr>
                    <td><code>-</code></td>
                    <td>Switch Parity</td>
                    <td> <code>-x</code></td>
                </tr>
                <tr>
                    <td><code>+</code></td>
                    <td>Try to convert to number</td>
                    <td> <code>+x (+"4" returns 4)</code></td>
                </tr>
                <tr>
                    <td><code>**</code></td>
                    <td>Exponentiation</td>
                    <td> <code>x**2</code></td>
                </tr>
            </table>
        </p>
    
<h2>Bitwise operators</h2>
        <p>

        </p>
    
<h2>Logical operators</h2>

        <p>

        </p>
    
<h2>BigInt operators</h2>

        <p>

        </p>
    
<h2>String operators</h2>

        <p>

        </p>
    
<h2>Conditional (ternary) operator</h2>

        <p>

        </p>
    
<h2>Comma operator</h2>

        <p>

        </p>
    
<h2>Unary operators</h2>

        <p>

        </p>
    
<h2>Relational operators</h2>

        <p>

        </p>
    
<h2>Basic expressions</h2>

        <p>

        </p>
    


