@{
    
}
<h2 >
    What is JSON? 
</h2>

<p>
    <b>JSON</b> (Java Script Object Notation) is a popular text format for communicating data 
    because of is human-readable syntax. It consists of of objects, which can contain arrays, 
    numbers, strings, booleans and nulls.
</p>

<h2>
    Types
</h2>
@{
    string[] collection = @"Number-Double precision floating-point
String-Series of characters
Boolean-true or false
Array-Ordered sequence of values
Value-String, Number, Boolean, null etc
Object-Unordered collection of key/value pairs
null-Null or Empty".Split('\n');
}
<table>
    <tr>
        <th>
            Type
        </th>
        <th>
            Description
        </th>
    </tr>
    @foreach (var item in collection)
    {
        <tr>
            <td>
                <b>@item.Split("-")[0]</b>
            </td>
            <td>
                ~ @item.Split("-")[1]
            </td>
        </tr>
    }
</table>
<br>
<figcaption>
    Table from: <a href="https://quickref.me/json">https://quickref.me/json</a>
</figcaption>

<h2>
    Objects
</h2>
<p>
    Objects are unordered key-value pairs inside curly braces <code>{}</code>.
</p>
<pre><code class="lang-json">
{
  "color": "red",
  "id": "123",
  "composition": {
    "R": 250,
    "G": 0,
    "B": 0
  },
  "empty_object": {}
}
</code></pre>

<h2>
    Key-value Pairs
</h2>
<p>
    Keys and values are seperated by a colon <code>:</code>, and each pair is seperated by a comma. 
    To get a value, use the key against the object it's in. It can be done with dot <code>.</code> notation or 
    with square brackets <code>[]</code>. 
</p>
<pre><code class="lang-js">
let people = {"name1" : "Hrvatin", "name2" : "Novak"}
// people.name1 = "Hrvatin"
// people.name2 = "Novak"

// people["name1"] = "Hrvatin"
// people["name2"] = "Novak"
    </code></pre>

<h2>
    Strings
</h2>

<p>
    A lot of the data in JSON is in string format, which is text wrapped in double quotes <code>""</code>. 
</p>
<pre><code class="lang-json">"Example String"</code></pre>
@{
    string[] collection2 = @"\""-Double quote
\\-Backslash
\/-Forward slash
\b-Backspace
\f-Form feed
\n-Newline
\r-Carriage return
\t-Tab
\u-Trailed by four hex digits".Split('\n');
}
<table>
    <tr>
        <th>
            Type
        </th>
        <th>
            Description
        </th>
    </tr>
    @foreach (var item in collection2)
    {
        <tr>
            <td>
                <code class="">@item.Split("-")[0]</code>
            </td>
            <td>
                ~ @item.Split("-")[1]
            </td>
        </tr>
    }
</table>


<pre><code class="lang-json">let obj = {
    "DoubleQuote" : "\"Double Quote in Text\"",
    "Backslash" : "Backslashes: \"\\ \\ \\ \\\"",
    "Tab" : "\tTab"
}
</code></pre>

<pre><code id="Code" class="lang-json">
obj.DoubleQuote
obj.Backslash
obj.Tab
</code></pre>

<script>
let obj = {
    "DoubleQuote" : "\"Double Quote in Text\"",
    "Backslash" : "backslashes: \"\\ \\ \\ \\\"",
    "Tab" : "\tTab"
}
document.querySelector("#Code").textContent += "\n" + obj.DoubleQuote + "\n"
document.querySelector("#Code").textContent += obj.Backslash + "\n"
document.querySelector("#Code").textContent += obj.Tab + "\n"
</script>

<h2>
    Arrays
</h2>
<p>
    Arrays are lists of information separated by commas and wrapped in square brackets <code>[]</code>.
</p>
<pre><code class="lang-json">["this", "is", "an", "array"]</code></pre>
<p>
    Accessing an array is done with square brackets <code>[]</code> and an index (arrays start at zero). 
</p>

<pre><code class="lang-json">let arr = ["this", "is", "an", "array"]
arr[0]
// this    
</code></pre>

<h2>
    Examples
</h2>

<h3>
    Example I
</h3>
<pre><code class="lang-json">{
"People" : {
    "Gerald" : {
        "Full-Name" : "Gerald Hopkins",
        "Height" : "6ft-2in",
        "Age" : 35,
        "Hobbies" : 
            ["Video Games", "Exercise", "Rock Climbing", "Wood Working"]
        },
    "Nicole" : {
        "Full-Name" : "Nicole Squarest",
        "Height" : "5ft-6in",
        "Age" : 27,
        "Hobbies" : 
            ["No Hobbies."]
        }
    }
}
</code></pre>



<h3>
    Example II
</h3>

<pre><code class="lang-json">{
  "positive number" : 999,
  "negative number" : -999,
  "fractional number" : 16.5,
  "exponent" : 1.0E+7,
  "zero" : 0
}
</code></pre>