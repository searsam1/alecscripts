
@{
    Dictionary<string, string> glossary =
    new Dictionary<string, string>();
    glossary.Add("Cascading", "Arrange (a number of devices or objects) in a series or sequence.");
    @* 
    glossary.Add("", ""); 
    *@
        
    @* TEST #rightSidebar overflow-y *@
    void runRightSideTest(){for (int i = 0; i < 2000; i++){glossary.Add(i.ToString(), "Testing");}}
    
    glossary.Add("Algorithm(Algo)", "A set of instructions to perform."); 
    glossary.Add("Coding", "Writing a set of instructions that will be compiled to another version or language."); 
    glossary.Add("Variable Types", "The way an object is meant to be viewed by the computer."); 
    glossary.Add("Loop", "Repeat until a condition is met"); 
    glossary.Add("For Loop", "Repeat a set number of times"); 
    glossary.Add("For-In Loop", "Repeat for every object in a container"); 
    glossary.Add("Variable", "A container that holds objects or other variables"); 
    glossary.Add("Script", "File for computer to read and programmer to write"); 
    glossary.Add("IDE", "Integrated Development Environment"); 
    glossary.Add("CSS", "Cascading Style Sheets");
    glossary.Add("HTML", "Hyper Text Markup Language");
    glossary.Add("man·tis·sa", "the part of a floating-point number that represents the significant digits of that number, and that is multiplied by the base raised to the exponent to give the actual value of the number.");
    glossary.Add("tdd", "Test Driven Development - Tests first, code second");
    glossary.Add("Recursion", "When a function calls itself with different inputs");
    glossary.Add("Node.js", "Javascript runtime that can be ran outside of the web browser.");
    glossary.Add("PHP", "Backend language known for its quirks but still extremely popular");
    glossary.Add("Programming Language", "A language designed for humans and computers to communicate");
    glossary.Add("High-level", "Programing language closer to humans than computers");
    glossary.Add("Low-level", "Programing language closer to computers than humans");
    glossary.Add("Functional Programming", "Programming paradigm that uses functions without side effects");
    glossary.Add("Side Effects", "When a function does something other than return a value (like modify a variable)");
    glossary.Add("Object-Oriented Programming (OOP)", "Programming paradigm that emphasizes objects, object attributes and object methods.");
    glossary.Add("API", "Application Programming Interface: waiter between the server and the client");
    glossary.Add("con·cat·e·na·tion", "The action of linking things together in a series.");


    @* glossary.Add("CSS", "Cascading Style Sheets"); *@
    @* glossary.Add("CSS", "Cascading Style Sheets"); *@
    @* glossary.Add("CSS", "Cascading Style Sheets"); *@
    @* glossary.Add("CSS", "Cascading Style Sheets"); *@
    @* glossary.Add("CSS", "Cascading Style Sheets"); *@
    
    
    var sortedGlossary = from entry in glossary orderby entry.Key ascending select entry;


    int term_count = glossary.Count;
    <center>
        <p class="btm-border-Magenta">
            @term_count Total Terms
        </p>
    </center>
    <ul>
        <h2>
            Definitions
        </h2>
    @foreach( KeyValuePair<string, string> kvp in sortedGlossary )
    {

        <li>
            <h3>
                @kvp.Key
            </h3>
        </li>
        <ul class="pb-3">
            <li>
                @kvp.Value
            </li>
        </ul>
    }
    </ul>
}
