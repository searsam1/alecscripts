
<p>
    Programming <b>definitions</b> for developers and coding hobbyists. 
</p>

<p>
    <b>Glossary</b> - an alphabetical list of terms or words found in or relating to a specific subject, text, or dialect, with explanations; a brief dictionary.
</p>


<figcaption>Image by <a href="https://pixabay.com/users/blickpixel-52945/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=585004">Michael Schwarzenberger</a> from <a href="https://pixabay.com//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=585004">Pixabay</a></figcaption>

@{
    Dictionary<string, string> glossary =
    new Dictionary<string, string>();
    glossary.Add("Cascading", "Arrange (a number of devices or objects) in a series or sequence.");
    @* 
    glossary.Add("", ""); 
    *@
        
    @* TEST #rightSidebar overflow-y *@
    @* void runRightSideTest(){for (int i = 0; i < 2000; i++){glossary.Add(i.ToString(), "Testing");}} *@
    
    glossary.Add("String", "A collection of characters, like a word or sentence."); 
    glossary.Add("LAN", "Local Access Network"); 
    glossary.Add("Host", "Computer on a network managing other computers"); 
    glossary.Add("Cookie", "Text files send to computer from the browser"); 
    glossary.Add("Cloud Storage", "Remote storage over the internet"); 
    glossary.Add("Latency", "Delay between entering input and getting output"); 
    glossary.Add("Compiling", "Translating high-level code to low-level machine code"); 
    glossary.Add("Boolean", "True or False value / 0 or 1"); 
    glossary.Add("I/O", "Input / Output"); 
    glossary.Add("ROM", "Read-only memory"); 
    glossary.Add("Secondary storage", "Longer term storage like a Hard Drive or SSD"); 
    glossary.Add("RAM", "Random Access Memory - Store data for processor "); 
    glossary.Add("bit", "A zero or a one (0 or 1)"); 
    glossary.Add("CPU", "Central Processing Unit"); 
    glossary.Add("Programming", "the planning, scheduling, or performing of a program"); 
    glossary.Add("Algorithm(Algo)", "A set of instructions to perform."); 
    glossary.Add("Coding", "Writing a set of instructions that will be compiled to another version or language."); 
    glossary.Add("Variable Types", "The way an object is meant to be viewed by the computer."); 
    glossary.Add("Loop", "Repeat until a condition is met"); 
    glossary.Add("For Loop", "Repeat a set number of times"); 
    glossary.Add("For-In Loop", "Repeat for every object in a container"); 
    glossary.Add("Variable", "A container that holds objects or other variables"); 
    glossary.Add("Script", "File for computer to read and programmer to write"); 
    glossary.Add("IDE", "Integrated Development Environment"); 
    glossary.Add("CSS", "Cascading Style Sheets");
    glossary.Add("HTML", "Hyper Text Markup Language");
    glossary.Add("man·tis·sa", "the part of a floating-point number that represents the significant digits of that number, and that is multiplied by the base raised to the exponent to give the actual value of the number.");
    glossary.Add("tdd", "Test Driven Development - Tests first, code second");
    glossary.Add("Recursion", "When a function calls itself with different inputs");
    glossary.Add("Node.js", "Javascript runtime that can be ran outside of the web browser.");
    glossary.Add("PHP", "Backend language known for its quirks but still extremely popular");
    glossary.Add("Programming Language", "A language designed for humans and computers to communicate");
    glossary.Add("High-level", "Programing language closer to humans than computers");
    glossary.Add("Low-level", "Programing language closer to computers than humans");
    glossary.Add("Functional Programming", "Programming paradigm that uses functions without side effects");
    glossary.Add("Side Effects", "When a function does something other than return a value (like modify a variable)");
    glossary.Add("Object-Oriented Programming (OOP)", "Programming paradigm that emphasizes objects, object attributes and object methods.");
    glossary.Add("API", "Application Programming Interface: waiter between the server and the client");
    glossary.Add("con·cat·e·na·tion", "The action of linking things together in a series.");
    glossary.Add("spam", "Repeated, unwanted requests");
    glossary.Add("USB", "Universal Serial Bus");
    glossary.Add("Cache", "Fast, nearby storage. It is a desk to a bookshelf; put the current books one is reading on the desk. The desk is the cache.");
    @* glossary.Add("CSS", "Cascading Style Sheets"); *@
    @* glossary.Add("CSS", "Cascading Style Sheets"); *@
    
    
    var sortedGlossary = from entry in glossary orderby entry.Key ascending select entry;


    int term_count = glossary.Count;
    <center>
        <p class="pt-2 text-center btm-border-Magenta">
            <span class=" text-success border-bottom border-success">@term_count</span> Total Terms
        </p>
    </center>
    <ul style="list-style: none;">
        <h2>
            Definitions
        </h2>
    @foreach( KeyValuePair<string, string> kvp in sortedGlossary )
    {

        <li>
            <h3>
                @kvp.Key
            </h3>
        </li>
        <ul class="pb-3">
            <li>
                @kvp.Value
            </li>
        </ul>
    }
    </ul>
}
<script>
    document.querySelector("h1").style.display = "none";
    document.querySelector("#toc").style.display = "none";
</script>

<script>
    for (let h of document.querySelectorAll("h3")){
        h.style.fontSize = "1.2em";
        h.style.fontWeight = "bold";
        h.style.margin = "1px";
        h.style.padding = "1px";
        h.style.paddingTop = "25px"
    }
</script>

<style>
    ul ul {
        list-style-type: none;
    }
    ul > ul > li::before {
        content: "↪︎";
    }
    #rightSidebar ul ul li::before{
        content: none;
    }
</style>

See <a href="https://www.collinsdictionary.com/us/word-lists/computer-terms-used-in-computing">more terms</a>