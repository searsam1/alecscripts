
<p>
    Enums are classes that only have constant attributes. They are useful for switch statements. 
</p>

<h2>
    Creating Enums
</h2>
<p>
    Create an enum with the <code>enum</code> keyword, followed by a name. 
    The constants are separated by commas and are usually uppercase. 
</p>

<pre><code class="lang-java">enum Num {
    ONE,
    TWO,
    THREE
  }</code></pre>


<h2>
    Enum inside class
</h2>
<p>
    Enums can go in classes: 
</p>
<pre><code class="lang-java">class Main {
    enum Num {
        ONE,
        TWO,
        THREE
    }

  public static void main(String[] args) {
    Num n = Num.ONE; 
    System.out.println(n);
    // ONE
  }
}</code></pre>

<h2>
    Switch case & enums
</h2>
<p>
    Enums are practical to use with switch statements for checking values. 
</p>
<pre><code class="lang-java">enum Num {
    ONE,
    TWO,
    THREE
  }

class Main {
  public static void main(String[] args) {
    Num myNum = Num.ONE; 

    switch(myNum) {
      case ONE:
        System.out.println("One 1");
        // One 1
        break;
      case TWO:
         System.out.println("Two 2");
        break;
      case THREE:
        System.out.println("Three 3");
        break;
    }
  }
}
</code></pre>

<h2>
    Loop over enum
</h2>
<p>
    Enums can be for-each overed using their <code>values()</code> method. It returns an array of the enum's constants. 
</p>
<pre><code class="lang-java">enum Num {
    ONE,
    TWO,
    THREE
  }

class Main {
  public static void main(String[] args) {

    for (Num n : Num.values()) {
        System.out.println(n);
        // ONE
        // TWO
        // THREE
      }
      
  }
}</code></pre>