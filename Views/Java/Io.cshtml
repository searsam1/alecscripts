<p>
    <code>I/O</code> stands for input/output and represents reading and writing to files.
    The <code>file</code> class from the <code>java.io</code> package gives methods for 
    working with files. 
</p>

<h2>
    java.io.file Class
</h2>
<p>
    Some of the methods used include: 
</p>
@{
    string[] array = "canRead()-canWrite()-createNewFile()-delete()-exists()-getName()-getAbsolutePath()-length()-list()-mkdir()".Split("-");
}
<ul>@foreach (string method in array){<li><code>@method</code></li>}</ul>
<p>
    Depending on the method, it will either return an object or a boolean telling 
    if a side effect has taken place or not (like if a file was created with <code>createNewFile</code>). 
    The list method returns an array and the length method returns the size in bytes. 
</p>

<h2>
    Creating Files
</h2>
<p>
    The <code>createNewFile()</code> method is used in Java to create a new file. It returns true if 
    the file was created and false if not. It also needs a <code>try-catch</code> block to catch a possible 
    <code>IOException</code>
</p>
<pre><code class="lang-java">import java.io.File; 
import java.io.IOException;

class CreateFile {
  public static void main(String[] args) {
    try {
      File myObj = new File("filename.txt");
      if (myObj.createNewFile()) {
        System.out.println("File created: " + myObj.getName());
      } else {
        System.out.println("File already exists.");
      }
    } catch (IOException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
  }
}
</code></pre>
<p>
    The example above will create a new file <code>filename.txt</code> if it does not exist. 
    If it does exist, however, it will fail and print <code>File already exists.</code>
</p>

<h2>
    Writing To files
</h2>
<p>
    Writing to files is done with the <code>FileWriter</code> class and its method, <code>write()</code>. Don't forget to 
    use <code>close()</code> on the file after writing to it. 
</p>

<pre><code class="lang-java">
import java.io.FileWriter;   // FileWriter class
import java.io.IOException;  // IOException class

class WriteToFile {
  public static void main(String[] args) {
    try {
      FileWriter myWriter = new FileWriter("filename.txt");
      myWriter.write("Java IS FUN!");
      myWriter.close();
      System.out.println("File Write Was Successful.");
    } catch (IOException e) {
      System.out.println("An Error Occurred.");
      e.printStackTrace();
    }
  }
}
</code></pre>
<p>
    If the file does not exist beforehand, it will create a new one. Otherwise, it will 
    override the current version.
</p>

<h2>
    Reading Files
</h2>
<p>
    Reading files can be done with the <code>Scanner</code> class from <code>java.util</code>. 
</p>
<pre><code class="lang-java">import java.io.File;  // File class
import java.io.FileNotFoundException; 
import java.util.Scanner; // Scanner class

class ReadFile {
  public static void main(String[] args) {
    try {
      File myObj = new File("filename.txt");
      Scanner myReader = new Scanner(myObj);
      while (myReader.hasNextLine()) {
        String data = myReader.nextLine();
        System.out.println(data);
      }
      myReader.close();
    } catch (FileNotFoundException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
  }
}</code></pre>