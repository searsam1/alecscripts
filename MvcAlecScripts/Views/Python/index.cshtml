@{
    ViewData["Title"] = "Python - Home";
    string[] pythonTOC = {"Split", "Passwords"};
    string Html = "<i> test <i>";
}

@{
    string BuiltIns = @"
    A
abs()
aiter()
all()
any()
anext()
ascii()

B
bin()
bool()
breakpoint()
bytearray()
bytes()

C
callable()
chr()
classmethod()
compile()
complex()

D
delattr()
dict()
dir()
divmod()

E
enumerate()
eval()
exec()

F
filter()
float()
format()
frozenset()

G
getattr()
globals()

H
hasattr()
hash()
help()
hex()

I
id()
input()
int()
isinstance()
issubclass()
iter()
L
len()
list()
locals()

M
map()
max()
memoryview()
min()

N
next()

O
object()
oct()
open()
ord()

P
pow()
print()
property()




R
range()
repr()
reversed()
round()

S
set()
setattr()
slice()
sorted()
staticmethod()
str()
sum()
super()

T
tuple()
type()

V
vars()

Z
zip()

_
__import__()
    ";
    string [] arr = BuiltIns.Split("\n");
    List<List<string>> blocks = new List<List<string>>();
    List<string> block = new List<string>();
}


<h6 class="display-6">
    What is Python?
</h6>
<div class="container">
    <div class="container">
        <p>
            Python is a programming language 
            that is easy to learn and use. It refers to 
            Monty Python and not the snake. Starting out 
            is as simple as downloading the python3 and 
            writing one's first <i>Hello_world.py</i> file.
            Python files end with <i>.py</i> and can be executed 
            from the command line.
        </p>
        <pre><code class="lang-shell">
python3 Hello_world.py
        </code></pre>

        <p>
            Python is a scripting language which means it is friendly 
            to the human writing it. Variables do not need a type declaration 
            and can be switched between types(like int and string). The applications 
            of python are mainly focused on data and data analysis, with 
            python being at the forefront of machine learning. It offers powerful graphing 
            tools for the everyday student all the way to advanced machine learning models.
        </p>
        <p>
            Python is an interpreted language, but do not confuse that with a 
            complied language. Python is a compiled language but it is executed 
            on a virtual machine via interpreter (or something like that). This means 
            python runs the same of mac and windows and the same interpreter can be 
            used, while a non-interpreted language like C++ needs a special 
            complier for the machine it is being ran on. 
        </p>

        <p>
            While this does make python slower, the increasing capabilities of 
            computers tied with the easy syntax makes it more than worth it, plus, 
            python can be made to run faster if needed. By only needing to install python3,
            one can run python3 "filename" without having to worry about compiling an a.out and
            running it.
        </p>
        <p>
            Many people use python as gateway to coding, which is fine. 
            The only problem is it skips over the concept of memory 
            and pointers. It is best to learn the basics with python 
            but also learn other concepts about low-level computing 
            like registers. At the same time, python is simple, but can
            easily be over complicated by nesting and while True loops. No 
            matter the language, scrambled smelly code is bad code 
            and hard for humans to understand: block things up and keep 
            things organized. 
        </p>

    </div>
</div>

<h6 class="display-6">
    Basic Maths
</h6>
<div class="container">
    
    <div class="container">
         <p>
            Python comes with the standard 
            set of math operations (+, -, *, /), along 
            with floor division // and the modulo operator %. Power 
            operations are done with **.
        </p>
        

        <pre><code class="lang-py">
x = 2
y = 3 

x * 2 # => 4
y * 2 # => 6

x ** y # => 8

20 // 11 # => 1
20 % 11 # => 9

        </code></pre>
        <p>
            Python also follows the normal order of operations. 
        </p>
    </div>
</div>

<h6 class="display-6">
    Variables and Data Types
</h6>
<div class="container">
    <div class="container">
        <p>
            There are strings or characters along with various math types like int and float.
            These values are stored in variables, like in math. Use the <code class="lang-py">=</code> operator 
            to assign a value to a variable, like how <code class="lang-py">x</code> and <code class="lang-py">y</code>
            are assigned int values in the example above.
        </p>
        <p>
            In statically typed language like C++, the type of the 
            variable must be declared when creating a variable:
            <code class="lang-cpp"> int n = 2;</code>. int is the type, n is the name and 
            2 is the integer value n takes on. Python, however, has dynamic variables 
            which means they do not need type declaration and can change types.
        </p>

        <pre><code class="lang-py">n = 2
# No type declaration
float_n = 2.0
string = "2"
boolean = True # or False
        </code></pre>
      <p>Vs. something like C++:</p>  
      <pre><code class="lang-cpp">
int n = 2;
string s = "hello world";
      </code></pre>
    </div>
</div>

<h6 class="display-6">
    Sequence Types 
</h6>
<div class="container">
    <div class="container">
        <p>
            Sequence types are just containers that hold other objects.
            Lists are the most dynamic and easy to use. They start and end with square
            brackets <code class="lang-py">[]</code>, while their objects
            are separated by commas. Items are accessed via index, starting at zero and
            ending at -1.
            <pre><code class="lang-py">
lst = ["obj1", "obj2", "obj3", "obj4"]
lst2 = [0, 1, 2, 3, 4, 5]

grocery_list = ["corn", "sugar", "starch", 
                "broccoli", "asparagus", "chicken", 
                "green pepper", "yellow pepper", "flour" ]
grocery_list[0]
# 'corn'
grocery_list[-1]
# 'flour'</code></pre>
        </p>
        <p>
            Python also comes with other containers like dictionaries, sets 
            and tuples. Dictionaries are hash maps with key-value pairs separated 
            by commas and linked with semicolons. Elements are accessed by key, a <code>KeyError</code>
            is thrown if the key is not found.  
            <pre><code class="lang-py">d = {"key" : "value"}
d["key"]
# "Value"</code></pre>
        </p>
        <p>
            Sets are like lists but they do not contain duplicate elements. If there
            is a list with 10 duplicate elements, then the set of that list 
            will only contain 1 unique element.
        </p>
        <pre><code class="lang-py">set_object = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
# {1}
        </code></pre>
        <p>
            Tuples are also like lists but they are denoted by parenthesis <code class="lang-py">()</code> 
            and cannot be changed after creation (immutable). This means that they can be used 
            as a key to a dictionary, unlike the other containers. 
        </p>
        <pre><code class="lang-py">t = (1, 2, 3, 4)
t[0] = 2</code></pre>
        <p><code class="lang-py">TypeError: 'tuple' object does not support item assignment</code></p>
    </div>
</div>

<h6 class="display-6">
    Iteration
</h6>
<div class="container">
    <div class="container">
        <p>
            Iterating is going through the items in a container. People iterate 
            over their shopping list when they go to the store to make sure 
            they do not forget anything, for example. Lists can 
            be iterated by index and the <code class="lang-py">range</code> function.
        </p>
        <p>
            Before iterating over a list one must understand what looping is.
            Basically, looping is the process of repeating something a given 
            number of times. The for loop is the most basic, for i in some range 
            execute the code in the body of the loop.
        </p>
        <pre><code class="lang-py">for i in range(10):
    print("hey")    
"""
hey
hey
...
hey
hey
"""</code></pre>

    <p>So, to iterate over a list, just loop 
    over it directly or by index.</p>
    <pre><code class="lang-py">
lst = [1, 2, 3]
for number in lst:
    print(number)
"""
1
2
3
"""
for i in range(len(lst)):
    print(lst[i])
"""
1
2
3
"""</code></pre>
    </div>
</div>

<h6 class="display-6">
    Functions
</h6>
<div class="container">
    <div class="container">
        <p>
            Functions are blocks of code that can be executed 
            without having to retype all the code. The values they 
            accept are called arguments and they implicitly always return None 
            is no return value is specified.
        </p>
        <p>
            The Syntax is simple enough, being defined with the <code class="lang-py">def</code> keyword followed 
            by the function name: <code class="lang-py">def foo():</code>. Where python differs from
            other languages is that the body of the function must be indented. If something comes after 
            the function and it is not in the indented body, python will not consider 
            it apart of the function. While most languages use {}, python uses
            indented blocks.
        </p>
        <pre><code class="lang-py">def do_something(x):
    print(x)
do_something(556)
# 556</code></pre>

    <p>
        Defining a function is not the same as calling it. Calling a function is executing the code 
        found in the function definition. 
    </p>
    </div>
</div>


<h6 class="display-6">
    Built-in Functions 
</h6>
<div class="container">
    <button id='builtInBtn' class="btn-custom " onclick="showID('builtIns'), flip('builtInBtn')"> <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
                                                                                                <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
                                                                                                </svg> 
                    </button>
    <div  id="builtIns" class="container hidden">
        <p>
            @foreach (var item in arr)
            {
                if (item.Trim().Trim(')').Length == 1){
                    
                    <p class="bg-light rounded shadow-sm text-center">
                        <span>@item</span>
                    </p>
                    
                }
                else if (item.Trim().Length != 0){
                    <code><a class=" link p-3" title="Go to @item on docs.Python " href="https://docs.python.org/3/library/functions.html#@item.Trim(')', '(')">@item.Trim()</a></code>
                }
            }
        </p>
    </div>
</div>